name: Deploy to Staging

on:
  push:
    branches:
      - staging

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # echo the ENV_FILE secret to a .env file
    - name: Create .env file
      run: |
        echo "${{ secrets.STAGING_ENV_FILE || '' }}" > .env.local
        cat .env.local

    - name: Check file existence
      id: check_files
      uses: andstor/file-existence-action@v2
      with:
        files: ".env"

    - name: create .env if missing
      if: steps.check_files.outputs.files_exists == 'false'
      run: | 
        echo "" > .env
        cat .env

    - name: rysnc .env to staging
      uses: Burnett01/rsync-deployments@5.2.1
      with:
        switches: -rtOvz --delete
        path: .env .env.local
        remote_path: ${{ secrets.STAGING_DEPLOY_PATH }}
        remote_host: ${{ secrets.DEPLOY_HOST }}
        remote_user: ${{ secrets.DEPLOY_USER }}
        remote_key: ${{ secrets.DEPLOY_KEY }}
        
    # get output of nvmrc
    - name: Get .nvmrc
      run: echo "NVMRC=$(cat .nvmrc)" >> $GITHUB_OUTPUT
      id: nvm

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ steps.nvm.outputs.NVMRC || 'lts/gallium' }}

    - name: Cache node modules
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        path: ~/.npm
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-

    - name: Install and Build
      run: |
        npm ci
        npm run build

    - name: Deploy Build
      uses: Burnett01/rsync-deployments@5.2.1
      with:
        switches: -rtOvz --delete
        path: dist/
        remote_path: ${{ secrets.DEPLOY_STAGING_PATH }}
        remote_host: ${{ secrets.DEPLOY_HOST }}
        remote_user: ${{ secrets.DEPLOY_USER }}
        remote_key: ${{ secrets.DEPLOY_KEY }}